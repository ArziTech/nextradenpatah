datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  article   article[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model resetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model resetPasswordRequest {
  id    String   @id @default(cuid())
  date  DateTime
  email String
}

enum programType {
  DAILY
  ANNUALY
}

model program {
  id               String             @id // title-year-identifier
  title            String
  description      String
  image            String
  type             programType
  programExecution programExecution[]
}

enum programStatus {
  UPCOMING
  DONE
  CANCELED
}

model programExecution {
  id        String        @id
  program   program       @relation(fields: [programId], references: [id])
  date      DateTime
  programId String
  status    programStatus
}

model article {
  id       String @id @default(cuid())
  title    String
  slug     String @unique
  category String
  content  String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}
